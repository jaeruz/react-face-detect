{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","initializing","setInitializing","videoRef","useRef","canvasRef","useEffect","a","process","Promise","all","faceapi","tinyFaceDetector","loadFromUri","then","startVideo","loadModels","navigator","mediaDevices","getUserMedia","video","stream","current","srcObject","err","console","error","className","ref","autoPlay","muted","height","width","onPlay","setInterval","innerHtml","displaySize","detections","resizedDetections","getContext","clearRect","drawDetections","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"8VA2DeA,MAtDf,WAEE,IAFa,EAI2BC,oBAAS,GAJpC,mBAINC,EAJM,KAIQC,EAJR,KAKPC,EAAWC,mBACXC,EAAYD,mBAGlBE,qBAAU,YACQ,uCAAG,sBAAAC,EAAA,sDACCC,4BAClBN,GAAgB,GAChBO,QAAQC,IAAI,CACVC,IAAaC,iBAAiBC,YAHdL,+BAIfM,KAAKC,GALS,2CAAH,qDAOhBC,KACC,IAEH,IAAMD,EAAa,WACjBE,UAAUC,aAAaC,aAAa,CAACC,MAAO,KAAKN,MAAK,SAACO,GAAWlB,EAASmB,QAAQC,UAAYF,KAAU,SAACG,GAAD,OAAQC,QAAQC,MAAMF,OAqBjI,OACE,yBAAKG,UAAU,OACb,8BAAO1B,EAAe,eAAiB,SACvC,yBAAK0B,UAAU,uCACb,2BAAOC,IAAKzB,EAAU0B,UAAQ,EAACC,OAAK,EAACC,OA5CvB,IA4C4CC,MA3C7C,IA2CgEC,OAtBzD,WACxBC,YAAW,sBAAC,gCAAA3B,EAAA,6DACNN,GACFC,GAAgB,GAElBG,EAAUiB,QAAQa,UAAYxB,IAA8BR,EAASmB,SAC/Dc,EAAc,CAClBJ,MA5Ba,IA6BbD,OA9Bc,KAgChBpB,IAAwBN,EAAUiB,QAASc,GATjC,SAUezB,IAAuBR,EAASmB,QAAS,IAAIX,KAV5D,OAUJ0B,EAVI,OAWJC,EAAoB3B,IAAsB0B,EAAYD,GAC5D/B,EAAUiB,QAAQiB,WAAW,MAAMC,UAAU,EAAG,EAlCjC,IADC,KAoChB7B,IAAa8B,eAAepC,EAAUiB,QAASgB,GAbrC,4CAcV,OAQE,4BAAQV,IAAKvB,EAAWsB,UAAU,yBCxCtBe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBlC,WACrBA,UAAUmC,cAAcC,MACrBvC,MAAK,SAAAwC,GACJA,EAAaC,gBAEdC,OAAM,SAAA9B,GACLD,QAAQC,MAAMA,EAAM+B,c","file":"static/js/main.dafc6b93.chunk.js","sourcesContent":["import React, { useState,useEffect,useRef } from 'react';\nimport * as faceapi from 'face-api.js'\nimport './App.css'\n\n\nfunction App() {\n\n  const videoHeight = 480;\n  const videoWidth = 640;\n  const [initializing, setInitializing] = useState(false);\n  const videoRef = useRef();\n  const canvasRef = useRef();\n\n\n  useEffect(() => {\n    const loadModels = async () => {\n      const MODEL_URL = process.env.PUBLIC_URL + '/models';\n      setInitializing(true)\n      Promise.all([\n        faceapi.nets.tinyFaceDetector.loadFromUri(MODEL_URL),\n      ]).then(startVideo)\n    }\n    loadModels();\n  }, [])\n\n  const startVideo = () => {\n    navigator.mediaDevices.getUserMedia({video: {}}).then((stream)=> {videoRef.current.srcObject = stream;}, (err)=> console.error(err));\n  }\n\n  const handleVideoOnPlay = () => {\n    setInterval(async() => {\n      if (initializing) {\n        setInitializing(false)\n      }\n      canvasRef.current.innerHtml = faceapi.createCanvasFromMedia(videoRef.current);\n      const displaySize = {\n        width: videoWidth,\n        height: videoHeight\n      }\n      faceapi.matchDimensions(canvasRef.current, displaySize)\n      const detections = await faceapi.detectAllFaces(videoRef.current, new faceapi.TinyFaceDetectorOptions())\n      const resizedDetections = faceapi.resizeResults(detections, displaySize)\n      canvasRef.current.getContext('2d').clearRect(0, 0, videoWidth, videoHeight)\n      faceapi.draw.drawDetections(canvasRef.current, resizedDetections)\n    },10)\n  }\n\n  return (\n    <div className=\"App\">\n      <span>{initializing ? 'initializing' : 'Ready'}</span>\n      <div className=\"display-flex justify-content-center\">\n        <video ref={videoRef} autoPlay muted height={videoHeight} width={videoWidth} onPlay={handleVideoOnPlay} />\n        <canvas ref={canvasRef} className=\"position-absolute\"/> \n      </div>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}